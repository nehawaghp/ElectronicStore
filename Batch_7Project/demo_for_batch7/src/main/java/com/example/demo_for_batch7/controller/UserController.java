package com.example.demo_for_batch7.controller;

import com.example.demo_for_batch7.dtos.ApiResponseMessage;
import com.example.demo_for_batch7.dtos.UserDto;
import com.example.demo_for_batch7.service.UserService;
import org.modelmapper.ModelMapper;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.logging.Logger;

public class UserController {
    @Autowired
    private UserService userService;

    @Autowired
    private ModelMapper modelMapper;


    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(UserController.class);
    @PostMapping("/")
    public ResponseEntity<UserDto>createUser(@RequestBody UserDto userDto)
    {
        LOGGER.info("Initiating request to create user");
        UserDto user = userService.createUser(userDto);
        LOGGER.info("Completed request to create user");
        return new ResponseEntity<>(user, HttpStatus.CREATED);
    }


    @PutMapping("/{userId}")
    public ResponseEntity<UserDto>updateUser(@PathVariable("userId")String userId,@RequestBody UserDto userDto){
        LOGGER.info("Initiating request to update userID");
        UserDto updatedUserDto = userService.updateUser(userDto, userId);
        LOGGER.info("Completed request of update user");
        return new ResponseEntity<>(updatedUserDto, HttpStatus.OK);
    }


    @DeleteMapping("/{userId}")
    public ResponseEntity<ApiResponseMessage>deleteUser(@PathVariable("userId") String userId){

        LOGGER.info("Initiating  request to delete userId");
        userService.deleteUser(userId);
        ApiResponseMessage message = ApiResponseMessage
                .builder()
                .message("User is deleted successfully!!")
                .success(true)
                .status(HttpStatus.OK)
                .build();
        LOGGER.info("Completed request of delete userId");
        return new ResponseEntity<>(message, HttpStatus.OK);
    }


    @GetMapping("/")
    public ResponseEntity<List<UserDto>>getAllUsers(){
        LOGGER.info("Initiating  request to  getAllUse");
        return new ResponseEntity<>(userService.getAllUser(), HttpStatus.OK);
    }


    @GetMapping("/{userId}")
    public ResponseEntity<UserDto> getUsers( @PathVariable
                                                         String userId){
        LOGGER.info("Initiating request to getUsers");
        return new ResponseEntity<>(userService.getUserById(userId), HttpStatus.OK);
    }


    @GetMapping("/email/{email}")
    public ResponseEntity<UserDto> getUserByEmail(@PathVariable String email){
        LOGGER.info("Initiating request to getUserByEmail");
        return new ResponseEntity<>(userService.getUserById(email), HttpStatus.OK);
    }


    @GetMapping("/search/{keyword}")
    public ResponseEntity<UserDto> searchUser(@PathVariable String keywords){
        LOGGER.info("Initiating request to searchUser");
        return new ResponseEntity(userService.searchUser(keywords), HttpStatus.OK);
    }
}























































































































































































































































































































































































































































































































































































































































































